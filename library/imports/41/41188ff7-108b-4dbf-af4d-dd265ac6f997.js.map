{"version":3,"sources":["assets/scripts/helper/MazeBuilder.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { MAZE_M, MAZE_N, TILE_TYPE } from \"./GameConstant\";\nimport Point from \"./Point\";\nimport Queue from \"./Queue\";\n\nconst actions = [\n\t[0, 1], // 向右\n\t[0, -1], // 向左\n\t[1, 0], // 向下\n\t[-1, 0], // 向上\n];\n\nfunction _initMaze(): number[][] {\n\tconst maze: number[][] = new Array(MAZE_M);\n\tfor (let i = 0; i < MAZE_M; i++) {\n\t\tmaze[i] = new Array(MAZE_N).fill(TILE_TYPE.TILE_WALL);\n\t}\n\treturn maze;\n}\n\nfunction _inBorder(x: number, y: number): boolean {\n\treturn x > 0 && x < MAZE_M && y > 0 && y < MAZE_N;\n}\n\nexport default class MazeBuilder {\n\tprivate _visited: boolean[][] = undefined;\n\n\tpublic constructor() {\n\t\tthis._visited = new Array(MAZE_M);\n\t\tfor (let i = 0; i < MAZE_M; i++) {\n\t\t\tthis._visited[i] = new Array(MAZE_N).fill(false);\n\t\t}\n\t}\n\n\t// 清空给定maze数组和对应的visited辅助数组\n\tprivate _clearMaze(maze: number[][]): void {\n\t\tfor (let i = 0; i < MAZE_M; i++) {\n\t\t\tfor (let j = 0; j < MAZE_N; j++) {\n\t\t\t\tmaze[i][j] = TILE_TYPE.TILE_WALL;\n\t\t\t\tthis._visited[i][j] = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic buildMaze(): number[][] {\n\t\tconst maze = _initMaze();\n\n\t\t// 构建可以通行的道路\n\t\tthis._generalizePath(maze, false);\n\n\t\treturn maze;\n\t}\n\n\t// eslint-disable-next-line complexity\n\tprivate _generalizePath(maze: number[][], rebuild: boolean): void {\n\t\tconst queue = new Queue<Point>();\n\t\tif (rebuild) {\n\t\t\t// 如果已经构建过maze, 重新生成迷宫之前需要把之前的数组clear掉\n\t\t\tthis._clearMaze(maze);\n\t\t}\n\t\t// 出生点入队\n\t\tqueue.enqueue({ x: 1, y: 1 });\n\t\tmaze[1][1] = TILE_TYPE.TILE_ROAD;\n\t\tthis._visited[1][1] = true;\n\t\tlet farthest: Point = undefined;\n\n\t\twhile (!queue.isEmpty()) {\n\t\t\tconst ptr = queue.randomDequeue();\n\t\t\t// let ptr = queue.dequeue();\n\t\t\tfarthest = ptr;\n\t\t\tfor (let i = 0; i < actions.length; i++) {\n\t\t\t\tconst newX = ptr.x + actions[i][0] * 2;\n\t\t\t\tconst newY = ptr.y + actions[i][1] * 2;\n\n\t\t\t\tif (_inBorder(newX, newY) && !this._visited[newX][newY]) {\n\t\t\t\t\tqueue.enqueue({ x: newX, y: newY });\n\t\t\t\t\tthis._visited[newX][newY] = true;\n\t\t\t\t\tif (newX < MAZE_M - 1 && newY <= MAZE_N - 1) {\n\t\t\t\t\t\tmaze[newX][newY] = TILE_TYPE.TILE_ROAD;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(ptr.x, ptr.y, actions[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst oneStep: Point = {\n\t\t\t\t\t\tx: ptr.x + actions[i][0],\n\t\t\t\t\t\ty: ptr.y + actions[i][1],\n\t\t\t\t\t};\n\t\t\t\t\tif (_inBorder(oneStep.x, oneStep.y)) {\n\t\t\t\t\t\tthis._visited[oneStep.x][oneStep.y] = true;\n\t\t\t\t\t\tmaze[oneStep.x][oneStep.y] = TILE_TYPE.TILE_ROAD;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmaze[farthest.x][farthest.y] = TILE_TYPE.TILE_STAR;\n\t}\n\n\tpublic rebuildMaze(maze: number[][]): void {\n\t\tthis._generalizePath(maze, true);\n\t}\n}\n"]}